{"version":3,"file":"embroidery.modern.js","sources":["../lib/index.ts","../lib/utils.ts"],"sourcesContent":["import { domReady, defaultEventNames } from './utils'\n\nenum Data {\n  Controller = 'data-controller',\n  Partial = 'data-partial',\n}\n\ntype Callback = (el: Element) => void\n\ntype Cache = {\n  controllers: Element[]\n  partials: Element[]\n}\n\nexport default class Embroidery {\n  cache: Cache = { controllers: [], partials: [] }\n\n  async start() {\n    await domReady()\n    console.info('Embroidery started.')\n  }\n\n  discover(callback: Callback, type = Data.Controller) {\n    document\n      .querySelectorAll(type)\n      .forEach((controller: Element) => callback(controller))\n  }\n\n  init(element: Element) {\n    if (element) {\n      try {\n        switch (element) {\n          case element.querySelector(Data.Controller): {\n            this.cache = {\n              ...this.cache,\n              controllers: [...this.cache.controllers, element],\n            }\n          }\n        }\n      } catch (error) {\n        setTimeout(() => {\n          throw error\n        }, 0)\n      }\n    } else {\n      console.error(\n        `An element ${element} was picked up but could not be initialized`\n      )\n    }\n  }\n}\n\n// const Embroidery = {\n//   cache: {\n//     controllers: [],\n//     partials: [],\n//   },\n//   start: async () => {\n//     await domReady()\n//     console.info('Embroidery started.')\n//   },\n//   discoverControllers: (callback: (el: Element) => void) => {\n//     const controllers = document.querySelectorAll(data.controller)\n//     controllers.forEach((controller: Element) => callback(controller))\n//   },\n//   discoverPartial: (callback: (el: Element) => void) => {\n//     const partials = document.querySelectorAll(data.partial)\n//     partials.forEach((partial: Element) => callback(partial))\n//   },\n//   init: (el: Element) => {\n//     if (el) {\n//       // Initialize the controller even if another one\n//       // has an error with try/catch\n//       try {\n//         switch (el) {\n//           case el.querySelector(data.controller):\n//             this.cache = {\n//               ...this.cache,\n//               controllers: [...this.cache.controllers, el],\n//             }\n//             return Object.create(Controller).create(el)\n\n//           case el.querySelector(data.partial):\n//             this.cache = {\n//               ...this.cache,\n//               partials: [...this.cache.partials, el],\n//             }\n//             return Object.create(Partial).create(el)\n//           default:\n//             throw new Error('Element is not a specified data type.')\n//         }\n//       } catch (error) {\n//         setTimeout(() => {\n//           throw error\n//         }, 0)\n//       }\n//     } else {\n//       console.error('A controller was picked up but could not be initialized.')\n//     }\n//   },\n//   discoverUninitializedControllers: (\n//     callback: (el: Element) => void,\n//     parentEl: Element = null\n//   ) => {\n//     const elements = (parentEl || document).querySelectorAll(data.controller)\n\n//     Array.from(elements)\n//       .filter((el) => !this.cache.controllers.includes(el))\n//       .forEach((el) => callback(el))\n//   },\n//   listenForRuntimeControllers: (callback: (el: Element) => void) => {\n//     const observer = new MutationObserver((mutations) =>\n//       mutations.map(({ addedNodes }) => {\n//         if (addedNodes.length > 0) {\n//           addedNodes.forEach((node) => {\n//             // Ignore non-elements\n//             if (node.nodeType !== 1) return\n//             // Don't listen for changes that happen in discovered controllers\n//             if (node?.parentElement?.closest(data.controller)) return\n\n//             this.discoverUninitializedControllers((el: Element) => {\n//               this.initializeComponent(el)\n//             }, node.parentElement)\n//           })\n//         }\n//       })\n//     )\n//     observer.observe(document.querySelector('body'), {\n//       childList: true,\n//       attributes: true,\n//       subtree: true,\n//     })\n//   },\n// }\n","// https://github.com/stimulusjs/stimulus/blob/master/packages/%40stimulus/core/src/application.ts\nexport function domReady() {\n  return new Promise((resolve) => {\n    if (document.readyState == 'loading') {\n      document.addEventListener('DOMContentLoaded', resolve)\n    } else {\n      resolve()\n    }\n  })\n}\n\nexport const defaultEventNames = {\n  a: 'click',\n  button: 'click',\n  form: 'submit',\n  input: 'input',\n  select: 'change',\n  textarea: 'input',\n}\n"],"names":["Data","constructor","this","controllers","partials","[object Object]","Promise","resolve","document","readyState","addEventListener","console","info","discover","callback","type","Controller","querySelectorAll","forEach","controller","init","element","querySelector","cache","error","setTimeout"],"mappings":"AAEA,IAAKA,GAAL,SAAKA,GACHA,+BACAA,yBAFF,CAAKA,IAAAA,4BAYLC,cACEC,WAAe,CAAEC,YAAa,GAAIC,SAAU,IAE5CC,wBCfWC,QAASC,IACS,WAAvBC,SAASC,WACXD,SAASE,iBAAiB,mBAAoBH,GAE9CA,MDaFI,QAAQC,KAAK,uBAGfC,SAASC,EAAoBC,EAAOf,EAAKgB,YACvCR,SACGS,iBAAiBF,GACjBG,QAASC,GAAwBL,EAASK,IAG/CC,KAAKC,GACH,GAAIA,EACF,IACE,OAAQA,GACN,KAAKA,EAAQC,cAActB,EAAKgB,YAC9Bd,KAAKqB,MAAQ,IACRrB,KAAKqB,MACRpB,YAAa,IAAID,KAAKqB,MAAMpB,YAAakB,KAI/C,MAAOG,GACPC,WAAW,KACT,MAAMD,GACL,QAGLb,QAAQa,oBACQH"}